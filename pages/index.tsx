import type { NextPage } from "next";
import { useState, useCallback, useEffect } from "react";
import Head from "next/head";
import {
  Center,
  Box,
  Stack,
  Button,
  Text,
  useDisclosure,
  Alert,
  AlertIcon,
} from "@chakra-ui/react";
import { withIronSessionSsr } from "iron-session/next";
import { ironOptions } from "lib/sessionConfig";
import {
  ListTab,
  TaskForm,
  Header,
  DeleteConfirmation,
  MoveListForm,
  TaskFormValues,
} from "components";
import { Task } from "@prisma/client";
import { TaskCard } from "components/TaskCard";
import { json } from "stream/consumers";

const Home: NextPage = () => {
  const [listId, setListId] = useState(-1);
  const [tasks, setTasks] = useState<Task[]>([]);
  const [stale, setStale] = useState(false);
  const [displayForm, setDisplayForm] = useState(false);
  const [selected, setSelected] = useState<number[]>([]);
  const [displayMoveForm, setDisplayMoveForm] = useState(false);
  const [editTask, setEditTask] = useState<TaskFormValues & { id: number }>();

  const { isOpen, onOpen, onClose } = useDisclosure();

  const getTasks = useCallback(async () => {
    const urlParams =
      listId === -1
        ? ""
        : new URLSearchParams({ listId: listId.toString() }).toString();
    const response = await fetch("/api/task?" + urlParams);
    if (response.ok) {
      setTasks(await response.json());
      setStale(false);
    }
  }, [setTasks, listId]);

  useEffect(() => {
    if (stale) {
      getTasks();
    }
  }, [getTasks, stale]);

  const batchDelete = async () => {
    const response = await fetch("/api/task", {
      method: "DELETE",
      body: JSON.stringify({ batch: selected }),
      headers: {
        "Content-Type": "application/json",
      },
    });

    if (response.ok) {
      setStale(true);
      setSelected([]);
    }
  };

  const batchComplete = async () => {
    const response = await fetch("/api/complete", {
      method: "POST",
      body: JSON.stringify({ batch: selected }),
      headers: {
        "Content-Type": "application/json"
      }
    });

    if (response.ok) {
      setStale(true);
    }
  };

  useEffect(() => {
    getTasks();
    setSelected([]);
  }, [listId, getTasks]);

  const taskCardCb = (id: number, selected: boolean) => {
    setSelected((taskIds) => {
      if (selected) {
        taskIds.push(id);
        return [...taskIds];
      } else {
        const newArr = taskIds.filter((taskId) => id !== taskId);
        return [...newArr];
      }
    });
  };

  return (
    <>
      <Head>
        <title>Task List</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />
      <Center>
        <Stack align="center" mt={8} w="full" mx={2}>
          <Box bg="white" maxW="600px" w="full" p={8} boxShadow="lg">
            <ListTab
              onListChange={(id: number) => {
                setListId(id);
              }}
            />
          </Box>
          {displayForm && (
            <Box bg="white" maxW="600px" w="full" p={8} boxShadow="lg">
              <TaskForm
                method="POST"
                listId={listId}
                cancel={() => {
                  setDisplayForm(false);
                }}
                onSuccess={() => {
                  setStale(true);
                  setDisplayForm(false);
                }}
              />
            </Box>
          )}
          {editTask && (
            <Box bg="white" maxW="600px" w="full" p={8} boxShadow="lg">
              <TaskForm
                id={editTask.id}
                initialValues={editTask}
                method="PUT"
                listId={listId}
                cancel={() => {
                  setEditTask(undefined);
                }}
                onSuccess={() => {
                  setStale(true);
                  setEditTask(undefined);
                }}
              />
            </Box>
          )}
          <Box bg="white" maxW="600px" w="full" boxShadow="lg" p={8}>
            <Stack align="center" spacing={4}>
              {listId === -1 && tasks.length === 0 && (
                <Alert>
                  <AlertIcon />
                  Select a list to be able to add a new task
                </Alert>
              )}
              <Button
                isDisabled={listId === -1}
                colorScheme="blue"
                onClick={() => setDisplayForm(true)}
              >
                Add New Task
              </Button>
              {displayMoveForm && (
                <MoveListForm
                  currentListId={listId}
                  ids={selected}
                  onSuccess={() => {
                    setStale(true);
                    setDisplayMoveForm(false);
                  }}
                />
              )}
              {tasks.length !== 0 && (
                <Stack direction="row" align="center">
                  <Text>Selected:</Text>
                  <Button
                    isDisabled={selected.length === 0}
                    colorScheme="green"
                    onClick={batchComplete}
                  >
                    Complete
                  </Button>
                  <Button
                    onClick={() => setDisplayMoveForm(true)}
                    isDisabled={selected.length === 0}
                    colorScheme="pink"
                  >
                    Move
                  </Button>
                  <Button
                    onClick={onOpen}
                    isDisabled={selected.length === 0}
                    colorScheme="red"
                  >
                    Delete
                  </Button>
                  <DeleteConfirmation
                    isOpen={isOpen}
                    onClose={onClose}
                    deleteCb={batchDelete}
                    message="Are you sure you want to delete all selected?"
                  />
                </Stack>
              )}
            </Stack>
            <Stack mt={4} w="full">
              {tasks.map((task: Task, ind) => (
                <TaskCard
                  editCb={(id: number, editFormValues: TaskFormValues) =>
                    setEditTask({ id, ...editFormValues })
                  }
                  onComplete={() => setStale(true)}
                  onSelectChanged={taskCardCb}
                  key={ind}
                  {...task}
                />
              ))}
            </Stack>
          </Box>
        </Stack>
      </Center>
    </>
  );
};

export const getServerSideProps = withIronSessionSsr(async ({ req }) => {
  const user = req.session.user;
  if (!user) {
    return {
      redirect: {
        permanent: false,
        destination: "/login",
      },
    };
  } else {
    return {
      props: {},
    };
  }
}, ironOptions);

export default Home;
